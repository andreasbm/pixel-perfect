/** Global map to be filled via variables */
$css-vars: () !default;

/**
 The variable may be set to "true" anywhere in the code,
 so native CSS custom properties will be used instead of the Sass global map
*/
$css-vars-use-native: true !default;

/** Enables allowing non assigned variables */
$css-vars-allow-non-assigned-vars: true !default;

/** enables the output of debug messages */
$css-vars-debug-log: false !default;

/**
	Assigns a variable to the global map
	@param {String} $name
	@param {Any} $value
	@return {Map} - Map containing all the assigned CSS variables.
 */
@function _css-var-assign($name: null, $value: null) {
	@if ($name==null) {
		@error "Variable name is expected, instead got: null";
	}

	@if ($value==null) {
		@error "Variable value is expected, instead got: null";
	}

	// Assign the value to the global map
	@if ($css-vars-debug-log and map-get($css-vars, $name)) {
		@warn "'#{$name}' variable is reassigned";
	}

	@return map-merge($css-vars, ($name: $value));
}

/**
	Determines whether a variable is assigned.

	@param {String} $name - The name of the variable.
	@return {Boolean - Whether or not the variable is assigned a value.
 */
@function is-css-var-assigned ($varName) {
	$varValue: map-get($css-vars, $varName);
	@return $varValue != null;
}

/**
 Emulates var() CSS native function behavior.

 E.G.:
 color: var(--main-color);
 background: var(--main-bg, green);

 @param {String} $args - "--" + variable name.
 @param {String.. (optional)} - Optional default value if variable is not assigned yet.
 @return {String} - Returns the native CSS variable or the value assigned.
*/
@function var($args...) {
	@if (length($args) == 0) {
		@error "Variable name is expected to be passed to the var() function";
	}

	@if (str-length(nth($args, 1)) < 2 or str-slice(nth($args, 1), 0, 2) != '--') {
		@error "Variable name is expected to start with '--'";
	}

	$varName: unquote(nth($args, 1));
	$varValue: map-get($css-vars, $varName);

	// If the value is null, the variable doesn't exist.
	@if ($varValue == null) {

		// Check if a default value was provided.
		@if (length($args) == 2) {
			@if ($css-vars-debug-log) {
				@warn "Provided default value is used for the variable: '#{$varName}'";
			}
			$varValue: nth($args, 2);

		} @else {
			@if (not $css-vars-allow-non-assigned-vars) {
				@error "The variable '#{$varName}' is not assigned";

			} @else if ($css-vars-debug-log) {
				@warn "var(#{$varName}) was not found and will be skipped in the result CSS. Make sure you define the variables before using them.";
			}
		}
	}

	@if ($css-vars-use-native) {
		// Native CSS: don't process function in case of native
		@return unquote('var(' + $args + ')');

	} @else {
		// Sass: return value from the map
		@return $varValue;
	}
}

/**
 CSS mixin to provide variables
 E.G.:
 @include css-vars((
    --color: rebeccapurple,
    --height: 68px,
    --margin-top: calc(2vh + 20px)
 ));

 @param {Map} $varMap - A map containing the css variables.
 @root {Boolean} $root - Whether the CSS variables should be added to the root or not.
*/
@mixin css-vars($varMap: null, $root: false) {
	@if ($varMap == null) {
		@error "Map of variables is expected, instead got: null";
	}

	@if (type-of($varMap) != map) {
		@error "Map of variables is expected, instead got another type passed: #{type_of($varMap)}";
	}

	// Merge variables and values to the global map (provides no output)
	@each $varName, $varValue in $varMap {
		$css-vars: _css-var-assign($varName, $varValue) !global; // store in global variable
	}

	// Native CSS: assign CSS custom properties to the global scope
	@if ($css-vars-use-native) {
		@mixin generate-vars() {
			@each $varName, $varValue in $varMap {
				@if (type_of($varValue)==string) {
					#{$varName}: $varValue // Prevent quotes interpolation
				} @else {
					#{$varName}: #{$varValue}
				}
			}
		}

		@if ($root) {
			@at-root :root {
				@include generate-vars();
			}
		} @else {
			@include generate-vars();
		}
	}
}

/**
	Creates a flat map with variables.

	@example
	pp-create-vars((
		"button": (
			"foreground": white,
			"background": black,
			"variation": (
				"primary": blue,
				"accent": orange
			)
		)
	));

	Will result in:	("--button-foreground": white, "--button-background": black, "--button-variation-primary": blue, "--button-background": black)

	@param {Map} $map
	@param {String} $prefix

	@return {Map}
 */
@function pp-create-vars($map, $prefix: "-") {
	$vars: ();

	@each $name, $value in $map {
		@if (type-of($value) != map) {
			$vars: map-merge($vars, ("#{$prefix}-#{$name}": $value));
		} @else {
			$vars: map-merge($vars, pp-create-vars($value, "#{$prefix}-#{$name}"));
		}
	}

	@return $vars;
}