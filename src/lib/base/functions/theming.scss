@import "util";

/**
 For a given hue in a palette, return the contrast color from the map of contrast palettes.
 @param $color-map
 @param $hue
 */
@function _contrast($colors, $hue) {
	@return pp-map-get(pp-map-get($colors, "contrast"), $hue);
}

/**
	Creates a palette based on a name, a colors map and a configuration.
	@param $name
	@param $colors
	@param $default
	@param $lighter
	@param $darker
 */
@function pp-palette($name, $colors, $default: 500, $lighter: 400, $darker: 600) {
	$vars: (
		"--#{$name}-default": pp-map-get($colors, $default),
		"--#{$name}-lighter": pp-map-get($colors, $lighter),
		"--#{$name}-darker": pp-map-get($colors, $darker),
		"--#{$name}-default-contrast": _contrast($colors, $default),
		"--#{$name}-lighter-contrast": _contrast($colors, $lighter),
		"--#{$name}-darker-contrast": _contrast($colors, $darker)
	);

	@each $hue, $color in $colors {
		@if pp-unitless($hue) {
			$vars: pp-map-collect($vars, (
				"--#{$name}-#{$hue}": $color,
				"--#{$name}-#{$hue}-contrast": _contrast($colors, $hue)
			));
		}
	}

	@return $vars;
}

/**
	Creates a flat map with variables.

	@example
	pp-create-vars((
		"button": (
			"foreground": white,
			"background": black,
			"variation": (
				"primary": blue,
				"accent": orange
			)
		)
	));

	Will result in:	("--button-foreground": white, "--button-background": black, "--button-variation-primary": blue, "--button-background": black)

	@param {Map} $map
	@param {String} $prefix

	@return {Map}
 */
@function pp-create-vars($map, $prefix: "-") {
	$vars: ();

	@each $name, $value in $map {
		@if (type-of($value) != map) {
			$vars: map-merge($vars, ("#{$prefix}-#{$name}": $value));
		} @else {
			$vars: map-merge($vars, pp-create-vars($value, "#{$prefix}-#{$name}"));
		}
	}

	@return $vars;
}