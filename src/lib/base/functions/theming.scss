// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function pp-contrast($palette, $hue) {
	@return map-get(map-get($palette, contrast), $hue);
}

// Creates a map of hues to colors for a theme.
// @param $color-map
// @param $primary
// @param $lighter
@function pp-palette($base-palette, $default: 500, $lighter: 400, $darker: 600) {
	$result: map_merge($base-palette, (
		default: map-get($base-palette, $default),
		lighter: map-get($base-palette, $lighter),
		darker: map-get($base-palette, $darker),
		default-contrast: pp-contrast($base-palette, $default),
		lighter-contrast: pp-contrast($base-palette, $lighter),
		darker-contrast: pp-contrast($base-palette, $darker)
	));

	// For each hue in the palette, add a "-contrast" color to the map.
	@each $hue, $color in $base-palette {
		$result: map_merge($result, (
			'#{$hue}-contrast': pp-contrast($base-palette, $hue)
		));
	}

	@return $result;
}

// Gets a color from a theme palette (the output of pp-palette).
//
// @param $color-map The theme palette (output of pp-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function pp-color($palette, $hue: default, $opacity: null) {

	// If hueKey is a number between zero and one, then it actually contains an
	// opacity value, so recall this function with the default hue and that given opacity.
	@if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
		@return pp-color($palette, default, $hue);
	}

	$color: map-get($palette, $hue);

	// Verify that the color is in fact a color.
	@if type-of($color) != color {
		@error "'#{color}' must be a color. Verify that the hue '#{$hue}' is present and valid in palette '#{$palette}'.";
	}

	$opacity: if($opacity == null, opacity($color), $opacity);

	@return rgba($color, $opacity);
}

// Creates a container object for a theme to be given to individual component theme mixins.
@function pp-theme($primary-palette, $accent-palette, $warn-palette, $error-palette, $success-palette, $is-dark, $foreground-vars, $background-vars) {
	@return (
		primary: $primary-palette,
		accent: $accent-palette,
		warn: $warn-palette,
		error: $error-palette,
		success: $success-palette,
		is-dark: $is-dark,
		foreground: $foreground-vars,
		background: $background-vars,
	);
}

@function pp-theme-prop($theme, $key) {
	@if type-of($theme) != map {
		@error "The theme is not a valid map. Ensure the theme is a valid map.";
	}
	
	@if map-has-key($theme, $key) == false {
		@error "The theme must contain the key '#{$key}'. Verify that the key '#{$key}' is present and valid in theme '#{$theme}'.";
	}
	
	@return map-get($theme, $key); 
}

// Returns the background property from the theme object
@function pp-background-vars($theme) {
	@return pp-theme-prop($theme, "background");
}

// Returns the foreground property from the theme object
@function pp-foreground-vars($theme) {
	@return pp-theme-prop($theme, "foreground");
}

// Returns the property with the given key from the theme vars object
@function pp-theme-var($vars, $key) {
	@return pp-theme-prop($vars, $key);
}

// Returns the primary palette from the theme object
@function pp-primary-palette($theme) {
	@return pp-theme-prop($theme, "primary");
}

// Returns the accent palette from the theme object
@function pp-accent-palette($theme) {
	@return pp-theme-prop($theme, "accent");
}

// Returns the warn palette from the theme object
@function pp-warn-palette($theme) {
	@return pp-theme-prop($theme, "warn");
}

// Returns the error palette from the theme object
@function pp-error-palette($theme) {
	@return pp-theme-prop($theme, "error");
}

// Returns the success palette from the theme object
@function pp-success-palette($theme) {
	@return pp-theme-prop($theme, "success");
}